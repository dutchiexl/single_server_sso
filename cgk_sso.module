<?php
/**
 * @file
 * A description of what your module does.
 */

/**
 * Implements hook_menu().
 */
function cgk_sso_menu() {
  $items['cgk/sso/login/%uid/%token'] = array(
    'page callback' => '_cgk_sso_login',
    'page_arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['cgk/sso/logout/%token'] = array(
    'page callback' => '_cgk_sso_logout',
    'page_arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_user_login().
 */
function cgk_sso_user_login(&$edit, $account) {
  // Make sure we come from the login form so this function is not triggered
  // by automated logins.
  if (!empty($edit['clicked_button'])) {

    // @TODO: make the statusses fixed;
    // Generate a line in the sso table to be able to later check if the user
    // needs to be logged in on all domains.
    _set_login_status("pending_login");
  }
}

/**
 * Implements hook_user_logout().
 */
function cgk_sso_user_logout($account) {
  global $user;
  $login_status = _get_sso_login_status($user->uid);
  if ($login_status !== NULL && $login_status->status == "pending_logout") {
    _set_login_status("pending_logout");
  }
}

/**
 * AJAX callback for loging in a user.
 * @param $uid
 * @param $token
 */
function _cgk_sso_login($uid, $token) {
  global $user;
  $user = user_load($uid);
  user_login_finalize();
  echo json_encode('ok');
  die;
}

function _cgk_sso_logout() {
  user_logout();
  echo json_encode('ok');
  die;
}

/**
 * Generates the content access allow headers so that jquery can call the login
 * function without getting blocked.
 */
function _generateAccessHeaders() {
  $current_domain = domain_get_domain();
  $all_domains = domain_domains();

  foreach ($all_domains as $domain) {
    // If the domain is not the current domain, the page header to allow the
    // page request from is fellow domains.
    if ($domain !== $current_domain) {
      $domain_path = domain_get_path($domain);
      drupal_add_http_header('Access-Control-Allow-Origin', $domain_path);
    }
  }
}

/**
 * Returns an array of login urls for the domains that need to be automatically
 * logged in.
 *
 * @return array
 */
function _get_callback_urls($action) {
  global $user;
  $callback_path = "cgk/sso/" . $action;
  $current_domain = domain_get_domain();
  $all_domains = domain_domains();

  // The login urls to the other domains.
  $call_urls = array();
  foreach ($all_domains as $domain) {
    // If the domain is not the current domain, send the request.
    if ($domain !== $current_domain) {
      $domain_path = domain_get_path($domain);
      if ($action == "login") {
        $call_urls[] = $domain_path . $callback_path  "/" . $user->uid . "/4";
        }
      elseif ($action == "logout") {
        $call_urls[] = $domain_path . $callback_path  "/" . $user->uid;
      }
    }
  }
  return $call_urls;
}

/**
 * Implements hook_page_alter().
 */
function cgk_sso_page_alter(&$page) {
  global $user;
  // Check if the user needs to be logged in on all domains.
  $login_status = _get_sso_login_status($user->uid);
  if ($login_status !== NULL && $login_status->status == "pending_login") {
    drupal_add_js(drupal_get_path('module', 'cgk_sso') . '/js/cgk_sso.js');
    $cgk_sso_settings = array(
      'uid' => $user->uid,
      'token' => '',
      'action' => 'login',
      'callback_urls' => array_values(_get_callback_urls("login"))
    );
    drupal_add_js(array('cgk_sso' => $cgk_sso_settings), 'setting');
    _set_login_status("logged_in");
  }
  elseif ($login_status !== NULL && $login_status->status == "pending_logout") {
    drupal_add_js(drupal_get_path('module', 'cgk_sso') . '/js/cgk_sso.js');
    $cgk_sso_settings = array(
      'uid' => $user->uid,
      'token' => '',
      'action' => 'logout',
      'callback_urls' => array_values(_get_callback_urls("logout"))
    );
    drupal_add_js(array('cgk_sso' => $cgk_sso_settings), 'setting');
    _set_login_status("logged_out");
  }
}

/**
 * Returns a cgk_sso login status object.
 * @param $uid
 * @return null
 */
function _get_sso_login_status($uid) {
  if ($uid == 0) {
    return NULL;
  }
  $records = db_select('cgk_sso', 'sso')// table
  ->fields('sso', array('id', 'uid', 'status'))
    ->condition('sso.uid', $uid, '=')
    ->execute();
  // Return a single record.
  foreach ($records as $record) {
    return $record;
  }
}

/**
 * Writes or updates a cgk_sso record status.
 * @param $status
 */
function _set_login_status($status) {
  global $user;
  $login_status = _get_sso_login_status($user->uid);

  // Create the record.
  $sso_record = new stdClass();

  // If a recorde exists set the primary key, so it is updated.
  $primary_keys = array();
  if ($login_status !== NULL) {
    $primary_keys = "id";
    $sso_record->id = $login_status->id;
  }
  else {
    $sso_record->created = time();
  }
  $sso_record->uid = $user->uid;
  $sso_record->status = $status;
  $sso_record->changed = time();
  drupal_write_record('cgk_sso', $sso_record, $primary_keys);
}
